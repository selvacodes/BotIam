{
  "version": 3,
  "sources": ["../autheticate.operations.ts"],
  "sourcesContent": ["\nimport { _notImplemented } from './utils';\nimport { generateMagicToken, generateUserAccessToken, generateUserRefreshToken } from './jwt.utils';\nimport { sendVerificationEmail } from './email.utils';\nimport * as DL from './user.data'\nimport axios from 'axios'\nimport { RawAuthentication, Authentication, TokenEncode } from './authenticate.schema';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Result } from '@badrap/result'\nimport { UserSchema } from './user.schema';\n\nexport const addAutheticateRequest = async (rawAuthRequest: RawAuthentication): Promise<Result<Authentication>> => {\n  const authRequest = { ...rawAuthRequest, id: uuidv4(), status: \"yet_to_verify\" as const }\n  const addedRequest = await DL.addAuthRequest(authRequest)\n  const userResult = await DL.getUserByEmail(authRequest.email)\n  const user = userResult.unwrap()\n  const magicTokenJWT = generateMagicToken({ id: authRequest.id, email: authRequest.email }, process.env.MAGIC_LINK_SECRET_KEY as string)\n  const verify_url = `${process.env.DOMAIN}/authenticate/verify/token/${magicTokenJWT.token}`\n  await sendVerificationEmail(rawAuthRequest.email, { verify_url, name: `${user.first_name} ${user.last_name}` })\n  console.log(\"magicToken\", magicTokenJWT)\n  return addedRequest\n}\n\nexport const processVerfication = async (tokenData: TokenEncode) => {\n  const { id } = tokenData\n  const requestDetail = await DL.getAuthenticationRequest(id)\n  const request = requestDetail.unwrap()\n  const userResult = await DL.getUserByEmail(request.email)\n  const user = userResult.unwrap()\n  const userWithId = UserSchema.parse(user)\n  const accessToken = generateUserAccessToken({ ...user , type : \"access_token\" }, process.env.JWT_SECRET_KEY as string)\n  const refreshToken = generateUserAccessToken({ ...user , type : \"refresh_token\" }, process.env.JWT_SECRET_KEY as string)\n  axios.post(request.callback_url, { access_token : accessToken , refresh_token : refreshToken})\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,iBAAsF;AACtF,mBAAsC;AACtC,SAAoB;AACpB,mBAAkB;AAElB,kBAA6B;AAE7B,kBAA2B;AAEpB,MAAM,wBAAwB,OAAO,mBAAuE;AACjH,QAAM,cAAc,EAAE,GAAG,gBAAgB,QAAI,YAAAA,IAAO,GAAG,QAAQ,gBAAyB;AACxF,QAAM,eAAe,MAAM,GAAG,eAAe,WAAW;AACxD,QAAM,aAAa,MAAM,GAAG,eAAe,YAAY,KAAK;AAC5D,QAAM,OAAO,WAAW,OAAO;AAC/B,QAAM,oBAAgB,+BAAmB,EAAE,IAAI,YAAY,IAAI,OAAO,YAAY,MAAM,GAAG,QAAQ,IAAI,qBAA+B;AACtI,QAAM,aAAa,GAAG,QAAQ,IAAI,oCAAoC,cAAc;AACpF,YAAM,oCAAsB,eAAe,OAAO,EAAE,YAAY,MAAM,GAAG,KAAK,cAAc,KAAK,YAAY,CAAC;AAC9G,UAAQ,IAAI,cAAc,aAAa;AACvC,SAAO;AACT;AAEO,MAAM,qBAAqB,OAAO,cAA2B;AAClE,QAAM,EAAE,GAAG,IAAI;AACf,QAAM,gBAAgB,MAAM,GAAG,yBAAyB,EAAE;AAC1D,QAAM,UAAU,cAAc,OAAO;AACrC,QAAM,aAAa,MAAM,GAAG,eAAe,QAAQ,KAAK;AACxD,QAAM,OAAO,WAAW,OAAO;AAC/B,QAAM,aAAa,uBAAW,MAAM,IAAI;AACxC,QAAM,kBAAc,oCAAwB,EAAE,GAAG,MAAO,MAAO,eAAe,GAAG,QAAQ,IAAI,cAAwB;AACrH,QAAM,mBAAe,oCAAwB,EAAE,GAAG,MAAO,MAAO,gBAAgB,GAAG,QAAQ,IAAI,cAAwB;AACvH,eAAAC,QAAM,KAAK,QAAQ,cAAc,EAAE,cAAe,aAAc,eAAgB,aAAY,CAAC;AAC/F;",
  "names": ["uuidv4", "axios"]
}
